(
  pips: {},
  words: {},
  enums: {
    "ACC54_0.GSR": (
      options: {
        "DISABLED": [],
        "ENABLED": [(frame:20,bit:0,invert:false,),],
      },
      desc: "if `ENABLED` primitive is reset by user GSR",
    ),
    "ACC54_0.LOADREGBYPS1": (
      options: {
        "BYPASS": [(frame:21,bit:0,invert:false,),],
        "REGISTER": [],
      },
      desc: "`LOAD` register 1 enable or bypass",
    ),
    "ACC54_0.LOADREGBYPS2": (
      options: {
        "BYPASS": [(frame:22,bit:0,invert:false,),],
        "REGISTER": [],
      },
      desc: "`LOAD` register 2 enable or bypass",
    ),
    "ACC54_0.LOADREGBYPS3": (
      options: {
        "BYPASS": [(frame:23,bit:0,invert:false,),],
        "REGISTER": [],
      },
      desc: "`LOAD` register 3 enable or bypass",
    ),
    "ACC54_0.M9ADDSUBREGBYPS1": (
      options: {
        "BYPASS": [(frame:26,bit:0,invert:false,),],
        "REGISTER": [],
      },
      desc: "`M9ADDSUB` register 1 enable or bypass",
    ),
    "ACC54_0.M9ADDSUBREGBYPS2": (
      options: {
        "BYPASS": [(frame:27,bit:0,invert:false,),],
        "REGISTER": [],
      },
      desc: "`M9ADDSUB` register 2 enable or bypass",
    ),
    "ACC54_0.M9ADDSUBREGBYPS3": (
      options: {
        "BYPASS": [(frame:28,bit:0,invert:false,),],
        "REGISTER": [],
      },
      desc: "`M9ADDSUB` register 3 enable or bypass",
    ),
    "ACC54_0.M9ADDSUB_CTRL": (
      options: {
        "ADDITION": [],
        "ADDSUB": [(frame:24,bit:0,invert:false,),],
        "SUBADD": [(frame:25,bit:0,invert:false,),],
        "SUBTRACTION": [(frame:24,bit:0,invert:false,),(frame:25,bit:0,invert:false,),],
      },
      desc: "select stage 1 operation in static opcode mode",
    ),
    "ACC54_0.OUTREGBYPS": (
      options: {
        "BYPASS": [(frame:29,bit:0,invert:false,),],
        "REGISTER": [],
      },
      desc: "output register enable or bypass",
    ),
    "MULT18_0.MULT18X18": (
      options: {
        "DISABLED": [],
        "ENABLED": [(frame:8,bit:0,invert:false,),],
      },
      desc: "enable 18x18 multiply",
    ),
    "MULT18_0.ROUNDHALFUP": (
      options: {
        "DISABLED": [],
        "ENABLED": [(frame:5,bit:0,invert:false,),],
      },
    ),
    "MULT18_0.ROUNDRTZI": (
      options: {
        "ROUND_TO_INFINITE": [(frame:6,bit:0,invert:false,),],
        "ROUND_TO_ZERO": [],
      },
      desc: "rounding mode",
    ),
    "MULT18_0.SFTEN": (
      options: {
        "DISABLED": [],
        "ENABLED": [(frame:7,bit:0,invert:false,),],
      },
      desc: "enable variable shifter controlled by `SFTCTRL`",
    ),
    "MULT9_H0.ASIGNED_OPERAND_EN": (
      options: {
        "DISABLED": [],
        "ENABLED": [(frame:81,bit:0,invert:false,),],
      },
      desc: "`A` is signed in `SIGNEDSTATIC_EN` mode",
    ),
    "MULT9_H0.BYPASS_MULT9": (
      options: {
        "BYPASS": [(frame:82,bit:0,invert:false,),],
        "USED": [],
      },
      desc: "selects between actually doing 9x9 mult; or just passing through inputs",
    ),
    "MULT9_H0.CEAMUX": (
      options: {
        "1": [(frame:83,bit:0,invert:false,),(frame:84,bit:0,invert:false,),],
        "CEA": [],
        "INV": [(frame:84,bit:0,invert:false,),],
      },
      desc: "CEA gating and inversion control",
    ),
    "MULT9_H0.CLKMUX": (
      options: {
        "0": [],
        "CLK": [(frame:85,bit:0,invert:false,),],
        "INV": [(frame:85,bit:0,invert:false,),(frame:86,bit:0,invert:false,),],
      },
      desc: "clock gating and inversion control",
    ),
    "MULT9_H0.GSR": (
      options: {
        "DISABLED": [(frame:87,bit:0,invert:true,),],
        "ENABLED": [(frame:87,bit:0,invert:false,),],
      },
      desc: "if `ENABLED` primitive is reset by user GSR",
    ),
    "MULT9_H0.MODE": (
      options: {
        "MULT9_CORE": [],
        "NONE": [(frame:87,bit:0,invert:false,),(frame:91,bit:0,invert:false,),],
      },
      desc: "MULT9_H0 primitive mode",
    ),
    "MULT9_H0.REGBYPSA1": (
      options: {
        "BYPASS": [(frame:88,bit:0,invert:false,),],
        "REGISTER": [],
      },
      desc: "register enable or bypass for A1",
    ),
    "MULT9_H0.REGBYPSA2": (
      options: {
        "BYPASS": [(frame:89,bit:0,invert:false,),],
        "REGISTER": [],
      },
      desc: "register enable or bypass for A2",
    ),
    "MULT9_H0.REGBYPSB": (
      options: {
        "BYPASS": [(frame:90,bit:0,invert:false,),],
        "REGISTER": [],
      },
      desc: "register enable or bypass for B",
    ),
    "MULT9_H0.RSTAMUX": (
      options: {
        "0": [],
        "INV": [(frame:91,bit:0,invert:false,),(frame:92,bit:0,invert:false,),],
        "RSTA": [(frame:91,bit:0,invert:false,),],
      },
      desc: "RSTA gating and inversion control",
    ),
    "MULT9_H0.SHIFTA": (
      options: {
        "DISABLED": [],
        "ENABLED": [(frame:93,bit:0,invert:false,),],
      },
      desc: "use shift register for `A`",
    ),
    "MULT9_H0.SIGNEDSTATIC_EN": (
      options: {
        "DISABLED": [],
        "ENABLED": [(frame:94,bit:0,invert:false,),],
      },
      desc: "`A` signedness from `SIGNEDSTATIC_EN` (when `ENABLED`) or `ASIGNED` input",
    ),
    "MULT9_H0.SR_18BITSHIFT_EN": (
      options: {
        "DISABLED": [],
        "ENABLED": [(frame:80,bit:0,invert:false,),],
      },
      desc: "use 18-bit shift register for `A`",
    ),
    "PREADD9_H0.BSIGNED_OPERAND_EN": (
      options: {
        "DISABLED": [],
        "ENABLED": [(frame:55,bit:0,invert:false,),],
      },
      desc: "`B` signedness in `SIGNEDSTATIC_EN` mode",
    ),
    "PREADD9_H0.BYPASS_PREADD9": (
      options: {
        "BYPASS": [(frame:56,bit:0,invert:false,),],
        "USED": [],
      },
      desc: "selects between pre-adder in datapath; or just passing through inputs",
    ),
    "PREADD9_H0.CEBMUX": (
      options: {
        "1": [(frame:57,bit:0,invert:false,),(frame:58,bit:0,invert:false,),],
        "CEB": [],
        "INV": [(frame:58,bit:0,invert:false,),],
      },
      desc: "CEB gating and inversion control",
    ),
    "PREADD9_H0.CECLMUX": (
      options: {
        "1": [(frame:59,bit:0,invert:false,),(frame:60,bit:0,invert:false,),],
        "CECL": [],
        "INV": [(frame:60,bit:0,invert:false,),],
      },
      desc: "CECL gating and inversion control",
    ),
    "PREADD9_H0.CLKMUX": (
      options: {
        "0": [],
        "CLK": [(frame:61,bit:0,invert:false,),],
        "INV": [(frame:61,bit:0,invert:false,),(frame:62,bit:0,invert:false,),],
      },
      desc: "clock gating and inversion control",
    ),
    "PREADD9_H0.CSIGNED": (
      options: {
        "DISABLED": [],
        "ENABLED": [(frame:63,bit:0,invert:false,),],
      },
      desc: "`C` signedness in `SIGNEDSTATIC_EN` mode",
    ),
    "PREADD9_H0.GSR": (
      options: {
        "DISABLED": [(frame:64,bit:0,invert:true,),],
        "ENABLED": [(frame:64,bit:0,invert:false,),],
      },
      desc: "if `ENABLED` primitive is reset by user GSR",
    ),
    "PREADD9_H0.MODE": (
      options: {
        "NONE": [(frame:64,bit:0,invert:false,),(frame:70,bit:0,invert:false,),(frame:72,bit:0,invert:false,),],
        "PREADD9_CORE": [],
      },
      desc: "PREADD9_H0 primitive mode",
    ),
    "PREADD9_H0.OPC": (
      options: {
        "INPUT_B_AS_PREADDER_OPERAND": [],
        "INPUT_C_AS_PREADDER_OPERAND": [(frame:65,bit:0,invert:false,),],
      },
      desc: "selects 2nd pre-adder operand",
    ),
    "PREADD9_H0.PREADDCAS_EN": (
      options: {
        "DISABLED": [],
        "ENABLED": [(frame:66,bit:0,invert:false,),],
      },
      desc: "enable pre-adder carry cascade",
    ),
    "PREADD9_H0.REGBYPSBL": (
      options: {
        "BYPASS": [(frame:67,bit:0,invert:false,),],
        "REGISTER": [],
      },
      desc: "register enable or bypass for BL",
    ),
    "PREADD9_H0.REGBYPSBR0": (
      options: {
        "BYPASS": [(frame:68,bit:0,invert:false,),],
        "REGISTER": [],
      },
      desc: "register enable or bypass for BR0",
    ),
    "PREADD9_H0.REGBYPSBR1": (
      options: {
        "BYPASS": [(frame:69,bit:0,invert:false,),],
        "REGISTER": [],
      },
      desc: "register enable or bypass for BR1",
    ),
    "PREADD9_H0.RSTBMUX": (
      options: {
        "0": [],
        "INV": [(frame:70,bit:0,invert:false,),(frame:71,bit:0,invert:false,),],
        "RSTB": [(frame:70,bit:0,invert:false,),],
      },
      desc: "RSTB gating and inversion control",
    ),
    "PREADD9_H0.RSTCLMUX": (
      options: {
        "0": [],
        "INV": [(frame:72,bit:0,invert:false,),(frame:73,bit:0,invert:false,),],
        "RSTCL": [(frame:72,bit:0,invert:false,),],
      },
      desc: "RSTCL gating and inversion control",
    ),
    "PREADD9_H0.SHIFTBL": (
      options: {
        "BYPASS": [(frame:74,bit:0,invert:false,),],
        "REGISTER": [],
      },
      desc: "use left shift register for `B`",
    ),
    "PREADD9_H0.SHIFTBR": (
      options: {
        "BYPASS": [(frame:75,bit:0,invert:false,),],
        "REGISTER": [],
      },
      desc: "use right shift register for `B`",
    ),
    "PREADD9_H0.SIGNEDSTATIC_EN": (
      options: {
        "DISABLED": [],
        "ENABLED": [(frame:76,bit:0,invert:false,),],
      },
      desc: "`B` and `C` signedness from parameters (`ENABLED`) or inputs",
    ),
    "PREADD9_H0.SR_18BITSHIFT_EN": (
      options: {
        "DISABLED": [],
        "ENABLED": [(frame:54,bit:0,invert:false,),],
      },
      desc: "use 18-bit shift register for `B`",
    ),
    "PREADD9_H0.SUBSTRACT_EN": (
      options: {
        "ADDITION": [(frame:77,bit:0,invert:false,),],
        "SUBTRACTION": [],
      },
      desc: "preadder function",
    ),
    "REG18_L0_1.CEPMUX": (
      options: {
        "1": [(frame:98,bit:0,invert:false,),(frame:99,bit:0,invert:false,),],
        "CEP": [],
        "INV": [(frame:99,bit:0,invert:false,),],
      },
      desc: "CEP gating and inversion control",
    ),
    "REG18_L0_1.CLKMUX": (
      options: {
        "0": [],
        "CLK": [(frame:100,bit:0,invert:false,),],
        "INV": [(frame:100,bit:0,invert:false,),(frame:101,bit:0,invert:false,),],
      },
      desc: "clock gating and inversion control",
    ),
    "REG18_L0_1.GSR": (
      options: {
        "DISABLED": [(frame:102,bit:0,invert:true,),],
        "ENABLED": [(frame:102,bit:0,invert:false,),],
      },
      desc: "if `ENABLED` primitive is reset by user GSR",
    ),
    "REG18_L0_1.MODE": (
      options: {
        "NONE": [(frame:102,bit:0,invert:false,),(frame:104,bit:0,invert:false,),],
        "REG18_CORE": [],
      },
      desc: "REG18_L0_1 primitive mode",
    ),
    "REG18_L0_1.REGBYPS": (
      options: {
        "BYPASS": [(frame:103,bit:0,invert:false,),],
        "REGISTER": [],
      },
      desc: "register enable or bypass",
    ),
    "REG18_L0_1.RSTPMUX": (
      options: {
        "0": [],
        "INV": [(frame:104,bit:0,invert:false,),(frame:105,bit:0,invert:false,),],
        "RSTP": [(frame:104,bit:0,invert:false,),],
      },
      desc: "RSTP gating and inversion control",
    ),
  },
  conns: {},
)